{"mappings":"AAAA,MAAM,CAAC,GAAG,GAAC,CAAC;IACR,IAAI,EAAC,QAAQ,EAAC,KAAK,EAAC,CAAC;QACjB,MAAM,EAAE,KAAK,IAAE,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;IACtD,CAAC;IACD,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,CAAC;QACnB,EAAE,EAAC,SAAS,CAAC,MAAM,KAAG,CAAC,EACnB,IAAI,CAAC,KAAK,CAAC,IAAI,IAAE,KAAK;aACpB,EAAE,EAAC,SAAS,CAAC,MAAM,KAAG,CAAC,EAAC,CAAC;YAC3B,EAAE,EAAC,MAAM,CAAC,IAAI,KAAG,CAAQ,SACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;iBACpB,EAAE,EAAC,IAAI,YAAY,MAAM,EAAC,CAAC;gBAC7B,KAAK,CAAC,MAAM,GAAC,IAAI;gBACjB,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,MAAM,CACjB,IAAI,CAAC,KAAK,CAAC,GAAG,IAAE,MAAM,CAAC,GAAG;YAElC,CAAC;QACL,CAAC;IACL,CAAC;IACD,IAAI,EAAC,QAAQ,EAAC,EAAE,EAAC,CAAC;QACd,GAAG,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,GAC3B,EAAkB,AAAlB,0BAA4B;QAClB,EAAR,CAAC,IAAI,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC;IAE/B,CAAC;AACL,CAAC;AAGD,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAY,aAAE,CAAC,CAAE,CAAU,AAAV,EAAwB,AAAxB,sBAAwB;;AAChD,OAAP,CAAC,GAAG,CAAC,GAAG;AACf,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAO,QAAE,CAAK,KAAE,CAAqB,AAArB,EAAyB,AAAzB,uBAAyB;;AACpD,OAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAC,CAAO,QAAE,CAAU,AAAV,EAAkB,AAAlB,gBAAkB;;AAC7C,GAAL,CAAC,KAAK,CAAC,GAAG,EAAC,CAAC;IAAA,UAAU,EAAC,CAAM;AAAA,CAAC,CAAC,CAAoB,AAApB,EAAsC,AAAtC,oCAAsC;;AAEtD,KAAb,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,CAAM;AAC/B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAE,CAAkB,AAAlB,EAA8B,AAA9B,4BAA8B;;AACvC,GAAT,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,GAAI,OAAO,CAAC,GAAG,CAAC,CAAC;CAAG,CAAoB,AAAlC,EAAkC,AAAlC,kCAAkC","sources":["src/task.js"],"sourcesContent":["window.dom={\r\n    find(selector,scope){\r\n        return (scope||document).querySelectorAll(selector)\r\n    },\r\n    style(node,name,value){\r\n        if(arguments.length===3){\r\n            node.style[name]=value\r\n        }else if(arguments.length===2){\r\n            if(typeof name==='string'){\r\n                return node.style[name]\r\n            }else if(name instanceof Object){\r\n                const object=name\r\n                for(let key in object){\r\n                    node.style[key]=object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n            // this传为null 同时传n\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst div = dom.find('#test>.red')[0] // 获取对应的元素\r\nconsole.log(div)\r\ndom.style(div, 'color', 'red') // 设置 div.style.color\r\nconsole.log(dom.style(div,'color'))//读取node样式\r\ndom.style(div,{background:'blue'})//两个arguments方式设置背景色\r\n\r\nconst divList = dom.find('.red')\r\nconsole.log(divList) // 获取多个 div.red 元素\r\ndom.each(divList, (n)=> console.log(n)) // 遍历 divList 里的所有元素"],"names":[],"version":3,"file":"task.74bef8b6.js.map","sourceRoot":"/__parcel_source_root/"}