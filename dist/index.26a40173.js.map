{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement('template');\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    // node2要插在node的后面\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.sextSibling);\r\n    },\r\n    // node2要插在node的前面\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    // 让node作为parent的孩子\r\n    append(parent, node) {\r\n        parent.appendChild(node)\r\n    },\r\n    // 添加一个父亲\r\n    wrap(node, parent) {\r\n        dom.before(node, parent);\r\n        dom.append(parent, node);\r\n    },\r\n    // 删除一个节点\r\n    remove(node) {\r\n        node.parentNode.removeChild(node);\r\n        // 返回被删除节点的引用\r\n        return node;\r\n    },\r\n    // 删除node里的所有子节点\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild;\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    // 修改node的属性和属性值\r\n    attr(node, name, value) {\r\n        // arguments函数的所有参数 如果参数长度为3，就修改 如果为2就读取\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node, string) {//适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerText = string\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                // dom.style(div,{color:'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {\r\n        // 为node添加一个class\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        // 删除一个class\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        // 查看有没有\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    // 创建一个监听事件\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    // 删除一个监听事件\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    // 查找一个选择器\r\n    // 可选择查找范围\r\n    find(selector, scope) {\r\n        // 因为这个api返回的是一个伪数组，所以记得使用时加索引\r\n        // 意思是如果有设定的范围 就在范围里找 没有的话就document\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    // 找一个元素的父亲\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    // 找一个元素的孩子\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    // 找一个元素的兄弟 首先要变成一个数组 用filter 过滤\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node)\r\n    },\r\n    // 找节点的下一个兄弟\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    },\r\n    // 获取这个节点在父元素中是第几个孩子\r\n    index(node){\r\n        const list=dom.children(node.parentNode)\r\n        let i\r\n        for(i=0;i<list.length;i++){\r\n            if(list[i]===node){\r\n                break\r\n            }\r\n        }\r\n        // 索引加一\r\n        return i+1\r\n    }\r\n};\r\n"],"names":[],"version":3,"file":"index.26a40173.js.map","sourceRoot":"/__parcel_source_root/"}